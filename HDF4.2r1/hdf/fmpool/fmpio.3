.\" WARNING! THIS FILE WAS GENERATED AUTOMATICALLY BY c2man!
.\" DO NOT EDIT! CHANGES MADE TO THIS FILE WILL BE LOST!
.TH "fmpio" 3 "2 February 1996" "c2man fmpio.h"
.SH "NAME"
MPset,
MPget,
MPopen,
MPclose,
MPflush,
MPseek,
MPread,
MPwrite \- File Memory Buffer Pool Stdio Interface
.SH "SYNOPSIS"
.ft B
#include <fmpio.h>
.sp
extern int MPset
.br
(
.br
	int pagesize,
.br
	int maxcache,
.br
	int flags
.br
);
.sp
extern int MPget
.br
(
.br
	int *pagesize,
.br
	int *maxcache,
.br
	int flags
.br
);
.sp
extern MPFILE *MPopen
.br
(
.br
	const char *path,
.br
	int flags
.br
);
.sp
extern int MPclose(MPFILE *mpfs);
.sp
extern int MPflush(MPFILE *mpfs);
.sp
extern int MPseek
.br
(
.br
	MPFILE *mpfs,
.br
	off_t offset,
.br
	int whence
.br
);
.sp
extern int MPread
.br
(
.br
	MPFILE *mpfs,
.br
	void *buf,
.br
	size_t nbytes
.br
);
.sp
extern int MPwrite
.br
(
.br
	MPFILE *mpfs,
.br
	void *buf,
.br
	size_t nbytes
.br
);
.ft R
.SH "PARAMETERS"
.TP
.B "int pagesize"
IN: pagesize to use for next open/create.
.TP
.B "int maxcache"
IN: max number of pages to cache.
.TP
.BR "int flags" "	(MPset)"
IN: flags = 0, MP_PAGEALL.
.TP
.B "int *pagesize"
OUT: pagesize to used in last open/create.
.TP
.B "int *maxcache"
OUT: max number of pages cached in last open/create.
.TP
.BR "int flags" "	(MPget)"
IN:.
.TP
.B "const char *path"
IN: filename.
.TP
.BR "int flags" "	(MPopen)"
IN: DFACC_CREATE, DFACC_READ, DFACC_WRITE,
DFACC_RDWR, DFACC_ALL.
.TP
.B "MPFILE *mpfs"
IN: File Memory pool handle.
.TP
.B "off_t offset"
IN: Offset into the file.
.TP
.B "int whence"
IN: SEEK_CUR, SEEK_SET, SEEK_END.
.TP
.BR "void *buf" "	(MPread)"
IN: User buffer to read data into.
.TP
.BR "size_t nbytes" "	(MPread)"
IN: number of bytes to read in.
.TP
.BR "void *buf" "	(MPwrite)"
IN: User buffer to write data from.
.TP
.BR "size_t nbytes" "	(MPwrite)"
IN: number of bytes to write out.
.SH "DESCRIPTION"
.SS "MPset"
Set the pagesize and maximum number of pages to cache on the next
open/create of a file. A pagesize that is a power of 2 is recommended.

The values set here only affect the next open/creation of a file and
do not change a particular file's paging behaviour after it has been
opened or created. This maybe changed in a later release.

Use flags arguement of 'MP_PAGEALL' if the whole file is to be cached
in memory otherwise passs in zero.
.SS "MPget"
This gets the last pagesize and maximum number of pages cached for
the last open/create of a file.
.SS "MPopen"
Open/Create the file for reading/writing and create a memory pool for
the file. Currently we let the library decide whether to use the
default PAGESIZE for creating pages and MAXCACHE for number of pages
to cache in the pool.
.SS "MPclose"
First sync the file memory pool to disk. Next close the file memory pool.
Finally close the file.
.SS "MPflush"
Flushes the file memory pool to disk.
.SS "MPseek"
Seeks to the correct page in the file depending upon the offset and the
flag 'whence'. Similiar to the stdio routine. Assumes the flags values
for SEEK_SET, SEEK_CUR and SEEK_END are universal. May not be true
for non-Unix OS's.
.SS "MPread"
This routine handles getting the correct pages to read to satisfy
the request. The data is then copied from the memory pool into
the user's buffer.
.SS "MPwrite"
This routine handles getting the correct pages to write to satisfy
the request. The data is then copied from the user's buffer to
the memory pool.
.SH "RETURNS"
.SS "MPset"
Returns SUCCEED if successful and FAIL otherwise.
.SS "MPget"
Returns SUCCEED.
.SS "MPopen"
Pointer to MPFILE struct if successful and NULL otherwise.
.SS "MPclose"
Returns SUCCEED on success and FAIL otherwise.
.SS "MPflush"
Returns SUCCEED on success and FAIL otherwise.
.SS "MPseek"
Returns offset into the file on success and FAIL otherwise.
.SS "MPread"
Returns number of bytes read if successful and FAIL otherwise.
.SS "MPwrite"
Returns number of bytes written if successful and FAIL otherwise.
.SH "NAME"
.SS "MPset"
MPset - set pagesize and maximum number of pages to cache on next open/create.
.SS "MPget"
MPget - get last pagesize and max number of pages cached for open/create.
.SS "MPopen"
MPopen - open/create the file and create a memory pool for file.
.SS "MPclose"
MPclose - close the file, sync the file memory pool to disk and close it.
.SS "MPflush"
MPflush - flush file memory pool to disk.
.SS "MPseek"
MPseek - seek to the specified file offset in the memory pool.
.SS "MPread"
MPread  - read 'nbytes' from file memory pool into 'buf'.
.SS "MPwrite"
MPwrite - write 'nbytes' form 'buf' to the file memory pool.
.SH "NOTE"
.SS "MPset"
Currently 'maxcache' has to be greater than 1. Maybe use special
case of 0 to specify you want to turn page buffering off or use
the flags arguement.

Current memory usage overhead for the Memory Pool is approximately
~(2k + maxcache*(28+pagesize) + npages*20) bytes.
.SS "MPseek"
Note that it returns an 'int' as opposed to 'off_t'. This is
because the HDF library still deals with file offsets in terms of
signed integers....*sigh*...hopefully This will be changed in a future
release.
.SS "MPread"
The memcpy from the buffer pool to the users buffer is an expensive
operation.
.SS "MPwrite"
The memcpy from the the users buffer to the memory pool is an expensive
operation.

.SH CONTACT
George Velamparampil <georgev@ncsa.uiuc.edu>
.sp 0
NCSA Software Development Group
.sp 0
HDF Group
.sp 0
152 Computing Applications Bldg.
.sp 0
605 E. Springfield Ave.
.sp 0
Champaign, IL 61820
